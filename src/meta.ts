/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* GRAM      := RULEDEF+;
* RULEDEF   := _ name=NAME '\s*:=\s*' rule=RULE '\s*;\s*';
* RULE      := head=ALT '\s*\|\s*' tail=RULE
*            | alt=ALT;
* ALT       := MATCHSPEC+;
* MATCHSPEC := _ name=NAME '=' rule=RULEXPR _
*            | _ rule=RULEXPR _;
* RULEXPR   := at=ATOM op='\+|\*'
*            | ATOM;
* ATOM      := name=NAME
*            | match=STRLIT;
* NAME      := '[a-zA-Z_]+';
* STRLIT    := '\'' val='([^\'\\]|(\\.))*' '\'';
* _         := '\s*';
*/
type Nullable<T> = T | null;
type $$RuleType<T> = (log? : (msg : string) => void) => Nullable<T>;
export interface ContextRecorder {
    record(pos: number, result: any, extraInfo : string[]) : void;
}
interface ASTNodeIntf {
    kind: ASTKinds;
}
export class $$StrMatch implements ASTNodeIntf {
    kind: ASTKinds.$$StrMatch = ASTKinds.$$StrMatch;
    match : string;
    constructor(val : string){
        this.match = val;
    }
}
export enum ASTKinds {
    $$StrMatch,
    GRAM,
    RULEDEF,
    RULE_1,
    RULE_2,
    ALT,
    MATCHSPEC_1,
    MATCHSPEC_2,
    RULEXPR_1,
    RULEXPR_2,
    ATOM_1,
    ATOM_2,
    NAME,
    STRLIT,
    _,
}
export type GRAM = RULEDEF[];
export class RULEDEF implements ASTNodeIntf {
    kind : ASTKinds.RULEDEF = ASTKinds.RULEDEF;
    name : NAME;
    rule : RULE;
    constructor(name : NAME,rule : RULE){
        this.name = name;
        this.rule = rule;
    }
}
export type RULE = RULE_1 | RULE_2;
export class RULE_1 implements ASTNodeIntf {
    kind : ASTKinds.RULE_1 = ASTKinds.RULE_1;
    head : ALT;
    tail : RULE;
    constructor(head : ALT,tail : RULE){
        this.head = head;
        this.tail = tail;
    }
}
export class RULE_2 implements ASTNodeIntf {
    kind : ASTKinds.RULE_2 = ASTKinds.RULE_2;
    alt : ALT;
    constructor(alt : ALT){
        this.alt = alt;
    }
}
export type ALT = MATCHSPEC[];
export type MATCHSPEC = MATCHSPEC_1 | MATCHSPEC_2;
export class MATCHSPEC_1 implements ASTNodeIntf {
    kind : ASTKinds.MATCHSPEC_1 = ASTKinds.MATCHSPEC_1;
    name : NAME;
    rule : RULEXPR;
    constructor(name : NAME,rule : RULEXPR){
        this.name = name;
        this.rule = rule;
    }
}
export class MATCHSPEC_2 implements ASTNodeIntf {
    kind : ASTKinds.MATCHSPEC_2 = ASTKinds.MATCHSPEC_2;
    rule : RULEXPR;
    constructor(rule : RULEXPR){
        this.rule = rule;
    }
}
export type RULEXPR = RULEXPR_1 | RULEXPR_2;
export class RULEXPR_1 implements ASTNodeIntf {
    kind : ASTKinds.RULEXPR_1 = ASTKinds.RULEXPR_1;
    at : ATOM;
    op : $$StrMatch;
    constructor(at : ATOM,op : $$StrMatch){
        this.at = at;
        this.op = op;
    }
}
export type RULEXPR_2 = ATOM;
export type ATOM = ATOM_1 | ATOM_2;
export class ATOM_1 implements ASTNodeIntf {
    kind : ASTKinds.ATOM_1 = ASTKinds.ATOM_1;
    name : NAME;
    constructor(name : NAME){
        this.name = name;
    }
}
export class ATOM_2 implements ASTNodeIntf {
    kind : ASTKinds.ATOM_2 = ASTKinds.ATOM_2;
    match : STRLIT;
    constructor(match : STRLIT){
        this.match = match;
    }
}
export type NAME = $$StrMatch;
export class STRLIT implements ASTNodeIntf {
    kind : ASTKinds.STRLIT = ASTKinds.STRLIT;
    val : $$StrMatch;
    constructor(val : $$StrMatch){
        this.val = val;
    }
}
export type _ = $$StrMatch;
export class Parser {
    private pos : number = 0;
    readonly input : string;
    constructor(input : string) {
        this.input = input;
    }
    private mark() : number {
        return this.pos;
    }
    reset(pos : number) {
        this.pos = pos;
    }
    finished() : boolean {
        return this.pos == this.input.length;
    }
    private loop<T>(func : $$RuleType<T>, star : boolean = false) : Nullable<T[]> {
        const mrk = this.mark();
        let res : T[] = [];
        for(;;) {
            const t = func();
            if(!t)
                break;
            res.push(t);
        }
        if(star || res.length > 0)
            return res;
        this.reset(mrk);
        return null;
    }
    private runner<T>(fn : $$RuleType<T>,
        cr? : ContextRecorder) : $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = cr ? (()=>{
                let extraInfo : string[] = [];
                const res = fn((msg : string) => extraInfo.push(msg));
                cr.record(mrk, res, extraInfo);
                return res;
            })() : fn();
            if(res)
                return res;
            this.reset(mrk);
            return null
        }
    }
    private choice<T>(fns : $$RuleType<T>[]) : Nullable<T> {
        for(let f of fns){
            const res = f();
            if(res)
                return res;
        }
        return null;
    }
    private regexAccept(match : string, cr? : ContextRecorder) : Nullable<$$StrMatch> {
        return this.runner<$$StrMatch>(
            (log) => {
                if(log)
                    log(match);
                var reg = new RegExp(match, 'y');
                reg.lastIndex = this.mark();
                const res = reg.exec(this.input);
                if(res){
                    this.pos = reg.lastIndex;
                    return new $$StrMatch(res[0]);
                }
                return null;
            }, cr)();
    }
    matchGRAM(cr? : ContextRecorder) : Nullable<GRAM> {
        return this.loop<RULEDEF>(()=> this.matchRULEDEF(cr), false);
    }
    matchRULEDEF(cr? : ContextRecorder) : Nullable<RULEDEF> {
        return this.runner<RULEDEF>(
            () => {
                let name : Nullable<NAME>;
                let rule : Nullable<RULE>;
                let res : Nullable<RULEDEF> = null;
                if(true
                    && this.match_(cr)
                    && (name = this.matchNAME(cr))
                    && this.regexAccept(String.raw`\s*:=\s*`, cr)
                    && (rule = this.matchRULE(cr))
                    && this.regexAccept(String.raw`\s*;\s*`, cr)
                )
                    res = new RULEDEF(name, rule);
                return res;
            }, cr)();
    }
    matchRULE(cr? : ContextRecorder) : Nullable<RULE> {
        return this.choice<RULE>([
            () => { return this.matchRULE_1(cr) },
            () => { return this.matchRULE_2(cr) },
        ]);
    }
    matchRULE_1(cr? : ContextRecorder) : Nullable<RULE_1> {
        return this.runner<RULE_1>(
            () => {
                let head : Nullable<ALT>;
                let tail : Nullable<RULE>;
                let res : Nullable<RULE_1> = null;
                if(true
                    && (head = this.matchALT(cr))
                    && this.regexAccept(String.raw`\s*\|\s*`, cr)
                    && (tail = this.matchRULE(cr))
                )
                    res = new RULE_1(head, tail);
                return res;
            }, cr)();
    }
    matchRULE_2(cr? : ContextRecorder) : Nullable<RULE_2> {
        return this.runner<RULE_2>(
            () => {
                let alt : Nullable<ALT>;
                let res : Nullable<RULE_2> = null;
                if(true
                    && (alt = this.matchALT(cr))
                )
                    res = new RULE_2(alt);
                return res;
            }, cr)();
    }
    matchALT(cr? : ContextRecorder) : Nullable<ALT> {
        return this.loop<MATCHSPEC>(()=> this.matchMATCHSPEC(cr), false);
    }
    matchMATCHSPEC(cr? : ContextRecorder) : Nullable<MATCHSPEC> {
        return this.choice<MATCHSPEC>([
            () => { return this.matchMATCHSPEC_1(cr) },
            () => { return this.matchMATCHSPEC_2(cr) },
        ]);
    }
    matchMATCHSPEC_1(cr? : ContextRecorder) : Nullable<MATCHSPEC_1> {
        return this.runner<MATCHSPEC_1>(
            () => {
                let name : Nullable<NAME>;
                let rule : Nullable<RULEXPR>;
                let res : Nullable<MATCHSPEC_1> = null;
                if(true
                    && this.match_(cr)
                    && (name = this.matchNAME(cr))
                    && this.regexAccept(String.raw`=`, cr)
                    && (rule = this.matchRULEXPR(cr))
                    && this.match_(cr)
                )
                    res = new MATCHSPEC_1(name, rule);
                return res;
            }, cr)();
    }
    matchMATCHSPEC_2(cr? : ContextRecorder) : Nullable<MATCHSPEC_2> {
        return this.runner<MATCHSPEC_2>(
            () => {
                let rule : Nullable<RULEXPR>;
                let res : Nullable<MATCHSPEC_2> = null;
                if(true
                    && this.match_(cr)
                    && (rule = this.matchRULEXPR(cr))
                    && this.match_(cr)
                )
                    res = new MATCHSPEC_2(rule);
                return res;
            }, cr)();
    }
    matchRULEXPR(cr? : ContextRecorder) : Nullable<RULEXPR> {
        return this.choice<RULEXPR>([
            () => { return this.matchRULEXPR_1(cr) },
            () => { return this.matchRULEXPR_2(cr) },
        ]);
    }
    matchRULEXPR_1(cr? : ContextRecorder) : Nullable<RULEXPR_1> {
        return this.runner<RULEXPR_1>(
            () => {
                let at : Nullable<ATOM>;
                let op : Nullable<$$StrMatch>;
                let res : Nullable<RULEXPR_1> = null;
                if(true
                    && (at = this.matchATOM(cr))
                    && (op = this.regexAccept(String.raw`\+|\*`, cr))
                )
                    res = new RULEXPR_1(at, op);
                return res;
            }, cr)();
    }
    matchRULEXPR_2(cr? : ContextRecorder) : Nullable<RULEXPR_2> {
        return this.matchATOM(cr);
    }
    matchATOM(cr? : ContextRecorder) : Nullable<ATOM> {
        return this.choice<ATOM>([
            () => { return this.matchATOM_1(cr) },
            () => { return this.matchATOM_2(cr) },
        ]);
    }
    matchATOM_1(cr? : ContextRecorder) : Nullable<ATOM_1> {
        return this.runner<ATOM_1>(
            () => {
                let name : Nullable<NAME>;
                let res : Nullable<ATOM_1> = null;
                if(true
                    && (name = this.matchNAME(cr))
                )
                    res = new ATOM_1(name);
                return res;
            }, cr)();
    }
    matchATOM_2(cr? : ContextRecorder) : Nullable<ATOM_2> {
        return this.runner<ATOM_2>(
            () => {
                let match : Nullable<STRLIT>;
                let res : Nullable<ATOM_2> = null;
                if(true
                    && (match = this.matchSTRLIT(cr))
                )
                    res = new ATOM_2(match);
                return res;
            }, cr)();
    }
    matchNAME(cr? : ContextRecorder) : Nullable<NAME> {
        return this.regexAccept(String.raw`[a-zA-Z_]+`, cr);
    }
    matchSTRLIT(cr? : ContextRecorder) : Nullable<STRLIT> {
        return this.runner<STRLIT>(
            () => {
                let val : Nullable<$$StrMatch>;
                let res : Nullable<STRLIT> = null;
                if(true
                    && this.regexAccept(String.raw`\'`, cr)
                    && (val = this.regexAccept(String.raw`([^\'\\]|(\\.))*`, cr))
                    && this.regexAccept(String.raw`\'`, cr)
                )
                    res = new STRLIT(val);
                return res;
            }, cr)();
    }
    match_(cr? : ContextRecorder) : Nullable<_> {
        return this.regexAccept(String.raw`\s*`, cr);
    }
    parse() : ParseResult {
        const mrk = this.mark();
        const res = this.matchGRAM();
        if(res && this.finished())
            return new ParseResult(res, null);
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchGRAM(rec);
        return new ParseResult(res, rec.getErr());
    }
}
export class ParseResult {
    ast : Nullable<GRAM>;
    err : Nullable<SyntaxErr>;
    constructor(ast : Nullable<GRAM>, err : Nullable<SyntaxErr>){
        this.ast = ast;
        this.err = err;
    }
}
export class SyntaxErr {
    pos : number;
    exp : string[];
    constructor(pos : number, exp : Set<string>){
        this.pos = pos;
        this.exp = [...exp];
    }
    toString() : string {
        return `Syntax Error at position ${this.pos}, expected one of ${this.exp.map(x => ` '${x}'`)}`;
    }
}
class ErrorTracker implements ContextRecorder {
    mxd : number | undefined;
    pmatches: Set<string> = new Set();
    record(pos : number, result : any, extraInfo : string[]){
        if(result === null) {
            if(this.mxd && this.mxd > pos)
                return;
            if(!this.mxd || this.mxd < pos){
                this.mxd = pos;
                this.pmatches = new Set();
            }
            extraInfo.forEach(x => this.pmatches.add(x));
        }
    }
    getErr() : SyntaxErr | null {
        if(this.mxd)
            return new SyntaxErr(this.mxd, this.pmatches);
        return null;
    }
}