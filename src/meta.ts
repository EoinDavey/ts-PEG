/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* GRAM      := RULEDEF+
* RULEDEF   := _ name=NAME _ ':=' _ rule=RULE _
* RULE      := head=ALT tail={_ '\|' _ alt=ALT }*
* ALT       := MATCHSPEC+
* MATCHSPEC := _ named={name=NAME '='}? rule=POSTOP _
* POSTOP    := pre=PREOP op='\+|\*|\?'?
* PREOP     := op='\&|!'? at=ATOM
* ATOM      := name=NAME !'\s*:='
*            | match=STRLIT
*            | '{' _ sub=RULE _ '}'
* NAME      := '[a-zA-Z_]+'
* STRLIT    := '\'' val='([^\'\\]|(\\.))*' '\''
* _         := '\s*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = (log?: (msg: string) => void) => Nullable<T>;
export interface ContextRecorder {
    record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]): void;
}
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    GRAM,
    RULEDEF,
    RULE,
    RULE_$0,
    ALT,
    MATCHSPEC,
    MATCHSPEC_$0,
    POSTOP,
    PREOP,
    ATOM_1,
    ATOM_2,
    ATOM_3,
    NAME,
    STRLIT,
    _,
}
export type GRAM = RULEDEF[];
export interface RULEDEF {
    kind: ASTKinds.RULEDEF;
    name: NAME;
    rule: RULE;
}
export interface RULE {
    kind: ASTKinds.RULE;
    head: ALT;
    tail: RULE_$0[];
}
export interface RULE_$0 {
    kind: ASTKinds.RULE_$0;
    alt: ALT;
}
export type ALT = MATCHSPEC[];
export interface MATCHSPEC {
    kind: ASTKinds.MATCHSPEC;
    named: Nullable<MATCHSPEC_$0>;
    rule: POSTOP;
}
export interface MATCHSPEC_$0 {
    kind: ASTKinds.MATCHSPEC_$0;
    name: NAME;
}
export interface POSTOP {
    kind: ASTKinds.POSTOP;
    pre: PREOP;
    op: Nullable<string>;
}
export interface PREOP {
    kind: ASTKinds.PREOP;
    op: Nullable<string>;
    at: ATOM;
}
export type ATOM = ATOM_1 | ATOM_2 | ATOM_3;
export interface ATOM_1 {
    kind: ASTKinds.ATOM_1;
    name: NAME;
}
export interface ATOM_2 {
    kind: ASTKinds.ATOM_2;
    match: STRLIT;
}
export interface ATOM_3 {
    kind: ASTKinds.ATOM_3;
    sub: RULE;
}
export type NAME = string;
export interface STRLIT {
    kind: ASTKinds.STRLIT;
    val: string;
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = new PosInfo(0, 1, 0);
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public matchGRAM($$dpth: number, cr?: ContextRecorder): Nullable<GRAM> {
        return this.loop<RULEDEF>(() => this.matchRULEDEF($$dpth + 1, cr), false);
    }
    public matchRULEDEF($$dpth: number, cr?: ContextRecorder): Nullable<RULEDEF> {
        return this.runner<RULEDEF>($$dpth,
            (log) => {
                if (log) {
                    log("RULEDEF");
                }
                let name: Nullable<NAME>;
                let rule: Nullable<RULE>;
                let res: Nullable<RULEDEF> = null;
                if (true
                    && this.match_($$dpth + 1, cr) !== null
                    && (name = this.matchNAME($$dpth + 1, cr)) !== null
                    && this.match_($$dpth + 1, cr) !== null
                    && this.regexAccept(String.raw`:=`, $$dpth + 1, cr) !== null
                    && this.match_($$dpth + 1, cr) !== null
                    && (rule = this.matchRULE($$dpth + 1, cr)) !== null
                    && this.match_($$dpth + 1, cr) !== null
                ) {
                    res = {kind: ASTKinds.RULEDEF, name, rule};
                }
                return res;
            }, cr)();
    }
    public matchRULE($$dpth: number, cr?: ContextRecorder): Nullable<RULE> {
        return this.runner<RULE>($$dpth,
            (log) => {
                if (log) {
                    log("RULE");
                }
                let head: Nullable<ALT>;
                let tail: Nullable<RULE_$0[]>;
                let res: Nullable<RULE> = null;
                if (true
                    && (head = this.matchALT($$dpth + 1, cr)) !== null
                    && (tail = this.loop<RULE_$0>(() => this.matchRULE_$0($$dpth + 1, cr), true)) !== null
                ) {
                    res = {kind: ASTKinds.RULE, head, tail};
                }
                return res;
            }, cr)();
    }
    public matchRULE_$0($$dpth: number, cr?: ContextRecorder): Nullable<RULE_$0> {
        return this.runner<RULE_$0>($$dpth,
            (log) => {
                if (log) {
                    log("RULE_$0");
                }
                let alt: Nullable<ALT>;
                let res: Nullable<RULE_$0> = null;
                if (true
                    && this.match_($$dpth + 1, cr) !== null
                    && this.regexAccept(String.raw`\|`, $$dpth + 1, cr) !== null
                    && this.match_($$dpth + 1, cr) !== null
                    && (alt = this.matchALT($$dpth + 1, cr)) !== null
                ) {
                    res = {kind: ASTKinds.RULE_$0, alt};
                }
                return res;
            }, cr)();
    }
    public matchALT($$dpth: number, cr?: ContextRecorder): Nullable<ALT> {
        return this.loop<MATCHSPEC>(() => this.matchMATCHSPEC($$dpth + 1, cr), false);
    }
    public matchMATCHSPEC($$dpth: number, cr?: ContextRecorder): Nullable<MATCHSPEC> {
        return this.runner<MATCHSPEC>($$dpth,
            (log) => {
                if (log) {
                    log("MATCHSPEC");
                }
                let named: Nullable<Nullable<MATCHSPEC_$0>>;
                let rule: Nullable<POSTOP>;
                let res: Nullable<MATCHSPEC> = null;
                if (true
                    && this.match_($$dpth + 1, cr) !== null
                    && ((named = this.matchMATCHSPEC_$0($$dpth + 1, cr)) || true)
                    && (rule = this.matchPOSTOP($$dpth + 1, cr)) !== null
                    && this.match_($$dpth + 1, cr) !== null
                ) {
                    res = {kind: ASTKinds.MATCHSPEC, named, rule};
                }
                return res;
            }, cr)();
    }
    public matchMATCHSPEC_$0($$dpth: number, cr?: ContextRecorder): Nullable<MATCHSPEC_$0> {
        return this.runner<MATCHSPEC_$0>($$dpth,
            (log) => {
                if (log) {
                    log("MATCHSPEC_$0");
                }
                let name: Nullable<NAME>;
                let res: Nullable<MATCHSPEC_$0> = null;
                if (true
                    && (name = this.matchNAME($$dpth + 1, cr)) !== null
                    && this.regexAccept(String.raw`=`, $$dpth + 1, cr) !== null
                ) {
                    res = {kind: ASTKinds.MATCHSPEC_$0, name};
                }
                return res;
            }, cr)();
    }
    public matchPOSTOP($$dpth: number, cr?: ContextRecorder): Nullable<POSTOP> {
        return this.runner<POSTOP>($$dpth,
            (log) => {
                if (log) {
                    log("POSTOP");
                }
                let pre: Nullable<PREOP>;
                let op: Nullable<Nullable<string>>;
                let res: Nullable<POSTOP> = null;
                if (true
                    && (pre = this.matchPREOP($$dpth + 1, cr)) !== null
                    && ((op = this.regexAccept(String.raw`\+|\*|\?`, $$dpth + 1, cr)) || true)
                ) {
                    res = {kind: ASTKinds.POSTOP, pre, op};
                }
                return res;
            }, cr)();
    }
    public matchPREOP($$dpth: number, cr?: ContextRecorder): Nullable<PREOP> {
        return this.runner<PREOP>($$dpth,
            (log) => {
                if (log) {
                    log("PREOP");
                }
                let op: Nullable<Nullable<string>>;
                let at: Nullable<ATOM>;
                let res: Nullable<PREOP> = null;
                if (true
                    && ((op = this.regexAccept(String.raw`\&|!`, $$dpth + 1, cr)) || true)
                    && (at = this.matchATOM($$dpth + 1, cr)) !== null
                ) {
                    res = {kind: ASTKinds.PREOP, op, at};
                }
                return res;
            }, cr)();
    }
    public matchATOM($$dpth: number, cr?: ContextRecorder): Nullable<ATOM> {
        return this.choice<ATOM>([
            () => this.matchATOM_1($$dpth + 1, cr),
            () => this.matchATOM_2($$dpth + 1, cr),
            () => this.matchATOM_3($$dpth + 1, cr),
        ]);
    }
    public matchATOM_1($$dpth: number, cr?: ContextRecorder): Nullable<ATOM_1> {
        return this.runner<ATOM_1>($$dpth,
            (log) => {
                if (log) {
                    log("ATOM_1");
                }
                let name: Nullable<NAME>;
                let res: Nullable<ATOM_1> = null;
                if (true
                    && (name = this.matchNAME($$dpth + 1, cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`\s*:=`, $$dpth + 1, cr)) !== null
                ) {
                    res = {kind: ASTKinds.ATOM_1, name};
                }
                return res;
            }, cr)();
    }
    public matchATOM_2($$dpth: number, cr?: ContextRecorder): Nullable<ATOM_2> {
        return this.runner<ATOM_2>($$dpth,
            (log) => {
                if (log) {
                    log("ATOM_2");
                }
                let match: Nullable<STRLIT>;
                let res: Nullable<ATOM_2> = null;
                if (true
                    && (match = this.matchSTRLIT($$dpth + 1, cr)) !== null
                ) {
                    res = {kind: ASTKinds.ATOM_2, match};
                }
                return res;
            }, cr)();
    }
    public matchATOM_3($$dpth: number, cr?: ContextRecorder): Nullable<ATOM_3> {
        return this.runner<ATOM_3>($$dpth,
            (log) => {
                if (log) {
                    log("ATOM_3");
                }
                let sub: Nullable<RULE>;
                let res: Nullable<ATOM_3> = null;
                if (true
                    && this.regexAccept(String.raw`{`, $$dpth + 1, cr) !== null
                    && this.match_($$dpth + 1, cr) !== null
                    && (sub = this.matchRULE($$dpth + 1, cr)) !== null
                    && this.match_($$dpth + 1, cr) !== null
                    && this.regexAccept(String.raw`}`, $$dpth + 1, cr) !== null
                ) {
                    res = {kind: ASTKinds.ATOM_3, sub};
                }
                return res;
            }, cr)();
    }
    public matchNAME($$dpth: number, cr?: ContextRecorder): Nullable<NAME> {
        return this.regexAccept(String.raw`[a-zA-Z_]+`, $$dpth + 1, cr);
    }
    public matchSTRLIT($$dpth: number, cr?: ContextRecorder): Nullable<STRLIT> {
        return this.runner<STRLIT>($$dpth,
            (log) => {
                if (log) {
                    log("STRLIT");
                }
                let val: Nullable<string>;
                let res: Nullable<STRLIT> = null;
                if (true
                    && this.regexAccept(String.raw`\'`, $$dpth + 1, cr) !== null
                    && (val = this.regexAccept(String.raw`([^\'\\]|(\\.))*`, $$dpth + 1, cr)) !== null
                    && this.regexAccept(String.raw`\'`, $$dpth + 1, cr) !== null
                ) {
                    res = {kind: ASTKinds.STRLIT, val};
                }
                return res;
            }, cr)();
    }
    public match_($$dpth: number, cr?: ContextRecorder): Nullable<_> {
        return this.regexAccept(String.raw`\s*`, $$dpth + 1, cr);
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchGRAM(0);
        if (res && this.finished()) {
            return new ParseResult(res, null);
        }
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchGRAM(0, rec);
        return new ParseResult(res, rec.getErr());
    }
    private mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (!t) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private runner<T>($$dpth: number, fn: $$RuleType<T>, cr?: ContextRecorder): $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = cr ? (() => {
                const extraInfo: string[] = [];
                const result = fn((msg: string) => extraInfo.push(msg));
                cr.record(mrk, $$dpth, result, this.negating, extraInfo);
                return result;
            })() : fn();
            if (res !== null) {
                return res;
            }
            this.reset(mrk);
            return null;
        };
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ContextRecorder): Nullable<string> {
        return this.runner<string>(dpth,
            (log) => {
                if (log) {
                    if (this.negating) {
                        log("$$!StrMatch");
                    } else {
                        log("$$StrMatch");
                    }
                    log(match);
                }
                const reg = new RegExp(match, "y");
                reg.lastIndex = this.mark().overallPos;
                const res = reg.exec(this.input);
                if (res) {
                    let lineJmp = 0;
                    let lind = -1;
                    for (let i = 0; i < res[0].length; ++i) {
                        if (res[0][i] === "\n") {
                            ++lineJmp;
                            lind = i;
                        }
                    }
                    this.pos = new PosInfo(reg.lastIndex, this.pos.line + lineJmp,
                       lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind));
                    return res[0];
                }
                return null;
            }, cr)();
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
}
export class ParseResult {
    public ast: Nullable<GRAM>;
    public err: Nullable<SyntaxErr>;
    constructor(ast: Nullable<GRAM>, err: Nullable<SyntaxErr>) {
        this.ast = ast;
        this.err = err;
    }
}
export class PosInfo {
    public overallPos: number;
    public line: number;
    public offset: number;
    constructor(overallPos: number, line: number, offset: number) {
        this.overallPos = overallPos;
        this.line = line;
        this.offset = offset;
    }
}
export class SyntaxErr {
    public pos: PosInfo;
    public exprules: string[];
    public expmatches: string[];
    constructor(pos: PosInfo, exprules: Set<string>, expmatches: Set<string>) {
        this.pos = pos;
        this.exprules = [...exprules];
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Tried to match rules ${this.exprules.join(", ")}. Expected one of ${this.expmatches.map((x) => ` '${x}'`)}`;
    }
}
class ErrorTracker implements ContextRecorder {
    private mxpos: PosInfo = new PosInfo(-1, -1, -1);
    private mnd: number = -1;
    private prules: Set<string> = new Set();
    private pmatches: Set<string> = new Set();
    public record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]) {
        if ((result === null) === negating) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.mnd = depth;
            this.pmatches.clear();
            this.prules.clear();
        } else if (pos.overallPos === this.mxpos.overallPos && depth < this.mnd) {
            this.mnd = depth;
            this.prules.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos && extraInfo.length >= 2) {
            if (extraInfo[0] === "$$StrMatch") {
                this.pmatches.add(extraInfo[1]);
            }
            if (extraInfo[0] === "$$!StrMatch") {
                this.pmatches.add(`not ${extraInfo[1]}`);
            }
        }
        if (this.mxpos.overallPos === pos.overallPos && this.mnd === depth) {
            extraInfo.forEach((x) => { if (x !== "$$StrMatch" && x !== "$$!StrMatch") { this.prules.add(x); } });
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.prules, this.pmatches);
        }
        return null;
    }
}