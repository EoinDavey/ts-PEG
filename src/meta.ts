/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* // Meta grammar for parser
* GRAM      := header=HDR? rules=RULEDEF+
* HDR       := '---' content='((?!---)(.|\n))*' '---'
* RULEDEF   := _ name=NAME _ ':=' _ rule=RULE _
* RULE      := head=ALT tail={_ '\|' _ alt=ALT }*
*           .list = ALT[] |ALT[] { return [this.head, ...this.tail.map((x) => x.alt)]; }
* ALT       := matches=MATCHSPEC+ attrs=ATTR*
* MATCHSPEC := _ named={name=NAME _ '=' _}? rule=MATCH
* MATCH     := SPECIAL | POSTOP
* SPECIAL   := op='@'
* POSTOP    := pre=PREOP op='\+|\*|\?'?
*             .optional = boolean { return this.op === '?';}
* PREOP     := op='\&|!'? at=ATOM
* ATOM      := name=NAME !'\s*:='
*            | match=STRLIT
*            | '{' _ sub=RULE _ '}'
* ATTR      := _ '\.' name=NAME _ '=' _ type=TS_TYPE _ '\{'
*     action='([^\{\}\\]|(\\.))*'
* '\}'
* NAME      := '[a-zA-Z_][a-zA-Z0-9_]*'
* STRLIT    := start=@ '\'' val='([^\'\\]|(\\.))*' '\''
* // Whitespace definition includes traditional whitespace
* // and // comments.
* _         := '(?:\s|(?:\/\/.*(?:\n|$)))*'
* // Grammar to match TypeScript type defs
* TS_TYPE := _ start=@ { TS_EXPR | TS_FUNCTION | TS_CONSTRUCTOR } end=@
* TS_EXPR := _ TS_PRIM {_ '[&|]' TS_PRIM }*
* TS_PRIM := {
*     '\(' TS_TYPE '\)'
*     | TS_TYPE_REF
*     | '\[' { TS_TYPE {',' TS_TYPE}* }? '\]'
*     } '\[\]'? // Optional trailing []s for array type
* TS_TYPE_REF := NAME {'\.' NAME}* TS_GENERIC_PARAMS?
* TS_FUNCTION := TS_GENERIC_PARAMS? '\(' TS_PARAM_LIST? '\)' '=>' TS_TYPE
* TS_CONSTRUCTOR := 'new' TS_FUNCTION
* TS_GENERIC_PARAMS := '<' {TS_GENERIC_PARAM {',' TS_GENERIC_PARAM}* }? '>'
* TS_GENERIC_PARAM := NAME {_ 'extends' TS_TYPE}?
* TS_PARAM_LIST := TS_REQUIRED_PARAMS {',' TS_OPTIONAL_PARAMS}? {',' TS_REST_PARAM}?
*     | TS_OPTIONAL_PARAMS {',' TS_REST_PARAM}?
*     | TS_REST_PARAM
* TS_REQUIRED_PARAMS := TS_REQUIRED_PARAM {',' TS_REQUIRED_PARAM}*
* TS_REQUIRED_PARAM := NAME ':' TS_TYPE
* TS_OPTIONAL_PARAMS := TS_OPTIONAL_PARAM {',' TS_OPTIONAL_PARAM}*
* TS_OPTIONAL_PARAM := NAME '\?' ':' TS_TYPE
* TS_REST_PARAM := '\.\.\.' NAME ':' TS_TYPE
*/
type Nullable<T> = T | null;
type $$RuleType<T> = (log?: (msg: string) => void) => Nullable<T>;
export interface ContextRecorder {
    record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]): void;
}
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    GRAM = "GRAM",
    HDR = "HDR",
    RULEDEF = "RULEDEF",
    RULE = "RULE",
    RULE_$0 = "RULE_$0",
    ALT = "ALT",
    MATCHSPEC = "MATCHSPEC",
    MATCHSPEC_$0 = "MATCHSPEC_$0",
    MATCH_1 = "MATCH_1",
    MATCH_2 = "MATCH_2",
    SPECIAL = "SPECIAL",
    POSTOP = "POSTOP",
    PREOP = "PREOP",
    ATOM_1 = "ATOM_1",
    ATOM_2 = "ATOM_2",
    ATOM_3 = "ATOM_3",
    ATTR = "ATTR",
    NAME = "NAME",
    STRLIT = "STRLIT",
    _ = "_",
    TS_TYPE = "TS_TYPE",
    TS_TYPE_$0_1 = "TS_TYPE_$0_1",
    TS_TYPE_$0_2 = "TS_TYPE_$0_2",
    TS_TYPE_$0_3 = "TS_TYPE_$0_3",
    TS_EXPR = "TS_EXPR",
    TS_EXPR_$0 = "TS_EXPR_$0",
    TS_PRIM = "TS_PRIM",
    TS_PRIM_$0_1 = "TS_PRIM_$0_1",
    TS_PRIM_$0_2 = "TS_PRIM_$0_2",
    TS_PRIM_$0_3 = "TS_PRIM_$0_3",
    TS_PRIM_$0_$0 = "TS_PRIM_$0_$0",
    TS_PRIM_$0_$0_$0 = "TS_PRIM_$0_$0_$0",
    TS_TYPE_REF = "TS_TYPE_REF",
    TS_TYPE_REF_$0 = "TS_TYPE_REF_$0",
    TS_FUNCTION = "TS_FUNCTION",
    TS_CONSTRUCTOR = "TS_CONSTRUCTOR",
    TS_GENERIC_PARAMS = "TS_GENERIC_PARAMS",
    TS_GENERIC_PARAMS_$0 = "TS_GENERIC_PARAMS_$0",
    TS_GENERIC_PARAMS_$0_$0 = "TS_GENERIC_PARAMS_$0_$0",
    TS_GENERIC_PARAM = "TS_GENERIC_PARAM",
    TS_GENERIC_PARAM_$0 = "TS_GENERIC_PARAM_$0",
    TS_PARAM_LIST_1 = "TS_PARAM_LIST_1",
    TS_PARAM_LIST_2 = "TS_PARAM_LIST_2",
    TS_PARAM_LIST_3 = "TS_PARAM_LIST_3",
    TS_PARAM_LIST_$0 = "TS_PARAM_LIST_$0",
    TS_PARAM_LIST_$1 = "TS_PARAM_LIST_$1",
    TS_PARAM_LIST_$2 = "TS_PARAM_LIST_$2",
    TS_REQUIRED_PARAMS = "TS_REQUIRED_PARAMS",
    TS_REQUIRED_PARAMS_$0 = "TS_REQUIRED_PARAMS_$0",
    TS_REQUIRED_PARAM = "TS_REQUIRED_PARAM",
    TS_OPTIONAL_PARAMS = "TS_OPTIONAL_PARAMS",
    TS_OPTIONAL_PARAMS_$0 = "TS_OPTIONAL_PARAMS_$0",
    TS_OPTIONAL_PARAM = "TS_OPTIONAL_PARAM",
    TS_REST_PARAM = "TS_REST_PARAM",
}
export interface GRAM {
    kind: ASTKinds.GRAM;
    header: Nullable<HDR>;
    rules: RULEDEF[];
}
export interface HDR {
    kind: ASTKinds.HDR;
    content: string;
}
export interface RULEDEF {
    kind: ASTKinds.RULEDEF;
    name: NAME;
    rule: RULE;
}
export class RULE {
    public kind: ASTKinds.RULE = ASTKinds.RULE;
    public head: ALT;
    public tail: RULE_$0[];
    public list: ALT[] |ALT[];
    constructor(head: ALT, tail: RULE_$0[]){
        this.head = head;
        this.tail = tail;
        this.list = (() => {
        return [this.head, ...this.tail.map((x) => x.alt)];
        })();
    }
}
export interface RULE_$0 {
    kind: ASTKinds.RULE_$0;
    alt: ALT;
}
export interface ALT {
    kind: ASTKinds.ALT;
    matches: MATCHSPEC[];
    attrs: ATTR[];
}
export interface MATCHSPEC {
    kind: ASTKinds.MATCHSPEC;
    named: Nullable<MATCHSPEC_$0>;
    rule: MATCH;
}
export interface MATCHSPEC_$0 {
    kind: ASTKinds.MATCHSPEC_$0;
    name: NAME;
}
export type MATCH = MATCH_1 | MATCH_2;
export type MATCH_1 = SPECIAL;
export type MATCH_2 = POSTOP;
export interface SPECIAL {
    kind: ASTKinds.SPECIAL;
    op: string;
}
export class POSTOP {
    public kind: ASTKinds.POSTOP = ASTKinds.POSTOP;
    public pre: PREOP;
    public op: Nullable<string>;
    public optional: boolean;
    constructor(pre: PREOP, op: Nullable<string>){
        this.pre = pre;
        this.op = op;
        this.optional = (() => {
        return this.op === '?';
        })();
    }
}
export interface PREOP {
    kind: ASTKinds.PREOP;
    op: Nullable<string>;
    at: ATOM;
}
export type ATOM = ATOM_1 | ATOM_2 | ATOM_3;
export interface ATOM_1 {
    kind: ASTKinds.ATOM_1;
    name: NAME;
}
export interface ATOM_2 {
    kind: ASTKinds.ATOM_2;
    match: STRLIT;
}
export interface ATOM_3 {
    kind: ASTKinds.ATOM_3;
    sub: RULE;
}
export interface ATTR {
    kind: ASTKinds.ATTR;
    name: NAME;
    type: TS_TYPE;
    action: string;
}
export type NAME = string;
export interface STRLIT {
    kind: ASTKinds.STRLIT;
    start: PosInfo;
    val: string;
}
export type _ = string;
export interface TS_TYPE {
    kind: ASTKinds.TS_TYPE;
    start: PosInfo;
    end: PosInfo;
}
export type TS_TYPE_$0 = TS_TYPE_$0_1 | TS_TYPE_$0_2 | TS_TYPE_$0_3;
export type TS_TYPE_$0_1 = TS_EXPR;
export type TS_TYPE_$0_2 = TS_FUNCTION;
export type TS_TYPE_$0_3 = TS_CONSTRUCTOR;
export interface TS_EXPR {
    kind: ASTKinds.TS_EXPR;
}
export interface TS_EXPR_$0 {
    kind: ASTKinds.TS_EXPR_$0;
}
export interface TS_PRIM {
    kind: ASTKinds.TS_PRIM;
}
export type TS_PRIM_$0 = TS_PRIM_$0_1 | TS_PRIM_$0_2 | TS_PRIM_$0_3;
export interface TS_PRIM_$0_1 {
    kind: ASTKinds.TS_PRIM_$0_1;
}
export type TS_PRIM_$0_2 = TS_TYPE_REF;
export interface TS_PRIM_$0_3 {
    kind: ASTKinds.TS_PRIM_$0_3;
}
export interface TS_PRIM_$0_$0 {
    kind: ASTKinds.TS_PRIM_$0_$0;
}
export interface TS_PRIM_$0_$0_$0 {
    kind: ASTKinds.TS_PRIM_$0_$0_$0;
}
export interface TS_TYPE_REF {
    kind: ASTKinds.TS_TYPE_REF;
}
export interface TS_TYPE_REF_$0 {
    kind: ASTKinds.TS_TYPE_REF_$0;
}
export interface TS_FUNCTION {
    kind: ASTKinds.TS_FUNCTION;
}
export interface TS_CONSTRUCTOR {
    kind: ASTKinds.TS_CONSTRUCTOR;
}
export interface TS_GENERIC_PARAMS {
    kind: ASTKinds.TS_GENERIC_PARAMS;
}
export interface TS_GENERIC_PARAMS_$0 {
    kind: ASTKinds.TS_GENERIC_PARAMS_$0;
}
export interface TS_GENERIC_PARAMS_$0_$0 {
    kind: ASTKinds.TS_GENERIC_PARAMS_$0_$0;
}
export interface TS_GENERIC_PARAM {
    kind: ASTKinds.TS_GENERIC_PARAM;
}
export interface TS_GENERIC_PARAM_$0 {
    kind: ASTKinds.TS_GENERIC_PARAM_$0;
}
export type TS_PARAM_LIST = TS_PARAM_LIST_1 | TS_PARAM_LIST_2 | TS_PARAM_LIST_3;
export interface TS_PARAM_LIST_1 {
    kind: ASTKinds.TS_PARAM_LIST_1;
}
export interface TS_PARAM_LIST_2 {
    kind: ASTKinds.TS_PARAM_LIST_2;
}
export type TS_PARAM_LIST_3 = TS_REST_PARAM;
export interface TS_PARAM_LIST_$0 {
    kind: ASTKinds.TS_PARAM_LIST_$0;
}
export interface TS_PARAM_LIST_$1 {
    kind: ASTKinds.TS_PARAM_LIST_$1;
}
export interface TS_PARAM_LIST_$2 {
    kind: ASTKinds.TS_PARAM_LIST_$2;
}
export interface TS_REQUIRED_PARAMS {
    kind: ASTKinds.TS_REQUIRED_PARAMS;
}
export interface TS_REQUIRED_PARAMS_$0 {
    kind: ASTKinds.TS_REQUIRED_PARAMS_$0;
}
export interface TS_REQUIRED_PARAM {
    kind: ASTKinds.TS_REQUIRED_PARAM;
}
export interface TS_OPTIONAL_PARAMS {
    kind: ASTKinds.TS_OPTIONAL_PARAMS;
}
export interface TS_OPTIONAL_PARAMS_$0 {
    kind: ASTKinds.TS_OPTIONAL_PARAMS_$0;
}
export interface TS_OPTIONAL_PARAM {
    kind: ASTKinds.TS_OPTIONAL_PARAM;
}
export interface TS_REST_PARAM {
    kind: ASTKinds.TS_REST_PARAM;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public matchGRAM($$dpth: number, $$cr?: ContextRecorder): Nullable<GRAM> {
        return this.runner<GRAM>($$dpth,
            (log) => {
                if (log) {
                    log("GRAM");
                }
                let $scope$header: Nullable<Nullable<HDR>>;
                let $scope$rules: Nullable<RULEDEF[]>;
                let $$res: Nullable<GRAM> = null;
                if (true
                    && (($scope$header = this.matchHDR($$dpth + 1, $$cr)) || true)
                    && ($scope$rules = this.loop<RULEDEF>(() => this.matchRULEDEF($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.GRAM, header: $scope$header, rules: $scope$rules};
                }
                return $$res;
            }, $$cr)();
    }
    public matchHDR($$dpth: number, $$cr?: ContextRecorder): Nullable<HDR> {
        return this.runner<HDR>($$dpth,
            (log) => {
                if (log) {
                    log("HDR");
                }
                let $scope$content: Nullable<string>;
                let $$res: Nullable<HDR> = null;
                if (true
                    && this.regexAccept(String.raw`(?:---)`, $$dpth + 1, $$cr) !== null
                    && ($scope$content = this.regexAccept(String.raw`(?:((?!---)(.|\n))*)`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:---)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.HDR, content: $scope$content};
                }
                return $$res;
            }, $$cr)();
    }
    public matchRULEDEF($$dpth: number, $$cr?: ContextRecorder): Nullable<RULEDEF> {
        return this.runner<RULEDEF>($$dpth,
            (log) => {
                if (log) {
                    log("RULEDEF");
                }
                let $scope$name: Nullable<NAME>;
                let $scope$rule: Nullable<RULE>;
                let $$res: Nullable<RULEDEF> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$rule = this.matchRULE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.RULEDEF, name: $scope$name, rule: $scope$rule};
                }
                return $$res;
            }, $$cr)();
    }
    public matchRULE($$dpth: number, $$cr?: ContextRecorder): Nullable<RULE> {
        return this.runner<RULE>($$dpth,
            (log) => {
                if (log) {
                    log("RULE");
                }
                let $scope$head: Nullable<ALT>;
                let $scope$tail: Nullable<RULE_$0[]>;
                let $$res: Nullable<RULE> = null;
                if (true
                    && ($scope$head = this.matchALT($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<RULE_$0>(() => this.matchRULE_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new RULE($scope$head, $scope$tail);
                }
                return $$res;
            }, $$cr)();
    }
    public matchRULE_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<RULE_$0> {
        return this.runner<RULE_$0>($$dpth,
            (log) => {
                if (log) {
                    log("RULE_$0");
                }
                let $scope$alt: Nullable<ALT>;
                let $$res: Nullable<RULE_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\|)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$alt = this.matchALT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.RULE_$0, alt: $scope$alt};
                }
                return $$res;
            }, $$cr)();
    }
    public matchALT($$dpth: number, $$cr?: ContextRecorder): Nullable<ALT> {
        return this.runner<ALT>($$dpth,
            (log) => {
                if (log) {
                    log("ALT");
                }
                let $scope$matches: Nullable<MATCHSPEC[]>;
                let $scope$attrs: Nullable<ATTR[]>;
                let $$res: Nullable<ALT> = null;
                if (true
                    && ($scope$matches = this.loop<MATCHSPEC>(() => this.matchMATCHSPEC($$dpth + 1, $$cr), false)) !== null
                    && ($scope$attrs = this.loop<ATTR>(() => this.matchATTR($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ALT, matches: $scope$matches, attrs: $scope$attrs};
                }
                return $$res;
            }, $$cr)();
    }
    public matchMATCHSPEC($$dpth: number, $$cr?: ContextRecorder): Nullable<MATCHSPEC> {
        return this.runner<MATCHSPEC>($$dpth,
            (log) => {
                if (log) {
                    log("MATCHSPEC");
                }
                let $scope$named: Nullable<Nullable<MATCHSPEC_$0>>;
                let $scope$rule: Nullable<MATCH>;
                let $$res: Nullable<MATCHSPEC> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$named = this.matchMATCHSPEC_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$rule = this.matchMATCH($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.MATCHSPEC, named: $scope$named, rule: $scope$rule};
                }
                return $$res;
            }, $$cr)();
    }
    public matchMATCHSPEC_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<MATCHSPEC_$0> {
        return this.runner<MATCHSPEC_$0>($$dpth,
            (log) => {
                if (log) {
                    log("MATCHSPEC_$0");
                }
                let $scope$name: Nullable<NAME>;
                let $$res: Nullable<MATCHSPEC_$0> = null;
                if (true
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.MATCHSPEC_$0, name: $scope$name};
                }
                return $$res;
            }, $$cr)();
    }
    public matchMATCH($$dpth: number, $$cr?: ContextRecorder): Nullable<MATCH> {
        return this.choice<MATCH>([
            () => this.matchMATCH_1($$dpth + 1, $$cr),
            () => this.matchMATCH_2($$dpth + 1, $$cr),
        ]);
    }
    public matchMATCH_1($$dpth: number, $$cr?: ContextRecorder): Nullable<MATCH_1> {
        return this.matchSPECIAL($$dpth + 1, $$cr);
    }
    public matchMATCH_2($$dpth: number, $$cr?: ContextRecorder): Nullable<MATCH_2> {
        return this.matchPOSTOP($$dpth + 1, $$cr);
    }
    public matchSPECIAL($$dpth: number, $$cr?: ContextRecorder): Nullable<SPECIAL> {
        return this.runner<SPECIAL>($$dpth,
            (log) => {
                if (log) {
                    log("SPECIAL");
                }
                let $scope$op: Nullable<string>;
                let $$res: Nullable<SPECIAL> = null;
                if (true
                    && ($scope$op = this.regexAccept(String.raw`(?:@)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SPECIAL, op: $scope$op};
                }
                return $$res;
            }, $$cr)();
    }
    public matchPOSTOP($$dpth: number, $$cr?: ContextRecorder): Nullable<POSTOP> {
        return this.runner<POSTOP>($$dpth,
            (log) => {
                if (log) {
                    log("POSTOP");
                }
                let $scope$pre: Nullable<PREOP>;
                let $scope$op: Nullable<Nullable<string>>;
                let $$res: Nullable<POSTOP> = null;
                if (true
                    && ($scope$pre = this.matchPREOP($$dpth + 1, $$cr)) !== null
                    && (($scope$op = this.regexAccept(String.raw`(?:\+|\*|\?)`, $$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new POSTOP($scope$pre, $scope$op);
                }
                return $$res;
            }, $$cr)();
    }
    public matchPREOP($$dpth: number, $$cr?: ContextRecorder): Nullable<PREOP> {
        return this.runner<PREOP>($$dpth,
            (log) => {
                if (log) {
                    log("PREOP");
                }
                let $scope$op: Nullable<Nullable<string>>;
                let $scope$at: Nullable<ATOM>;
                let $$res: Nullable<PREOP> = null;
                if (true
                    && (($scope$op = this.regexAccept(String.raw`(?:\&|!)`, $$dpth + 1, $$cr)) || true)
                    && ($scope$at = this.matchATOM($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.PREOP, op: $scope$op, at: $scope$at};
                }
                return $$res;
            }, $$cr)();
    }
    public matchATOM($$dpth: number, $$cr?: ContextRecorder): Nullable<ATOM> {
        return this.choice<ATOM>([
            () => this.matchATOM_1($$dpth + 1, $$cr),
            () => this.matchATOM_2($$dpth + 1, $$cr),
            () => this.matchATOM_3($$dpth + 1, $$cr),
        ]);
    }
    public matchATOM_1($$dpth: number, $$cr?: ContextRecorder): Nullable<ATOM_1> {
        return this.runner<ATOM_1>($$dpth,
            (log) => {
                if (log) {
                    log("ATOM_1");
                }
                let $scope$name: Nullable<NAME>;
                let $$res: Nullable<ATOM_1> = null;
                if (true
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:\s*:=)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ATOM_1, name: $scope$name};
                }
                return $$res;
            }, $$cr)();
    }
    public matchATOM_2($$dpth: number, $$cr?: ContextRecorder): Nullable<ATOM_2> {
        return this.runner<ATOM_2>($$dpth,
            (log) => {
                if (log) {
                    log("ATOM_2");
                }
                let $scope$match: Nullable<STRLIT>;
                let $$res: Nullable<ATOM_2> = null;
                if (true
                    && ($scope$match = this.matchSTRLIT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ATOM_2, match: $scope$match};
                }
                return $$res;
            }, $$cr)();
    }
    public matchATOM_3($$dpth: number, $$cr?: ContextRecorder): Nullable<ATOM_3> {
        return this.runner<ATOM_3>($$dpth,
            (log) => {
                if (log) {
                    log("ATOM_3");
                }
                let $scope$sub: Nullable<RULE>;
                let $$res: Nullable<ATOM_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$sub = this.matchRULE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ATOM_3, sub: $scope$sub};
                }
                return $$res;
            }, $$cr)();
    }
    public matchATTR($$dpth: number, $$cr?: ContextRecorder): Nullable<ATTR> {
        return this.runner<ATTR>($$dpth,
            (log) => {
                if (log) {
                    log("ATTR");
                }
                let $scope$name: Nullable<NAME>;
                let $scope$type: Nullable<TS_TYPE>;
                let $scope$action: Nullable<string>;
                let $$res: Nullable<ATTR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchTS_TYPE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$action = this.regexAccept(String.raw`(?:([^\{\}\\]|(\\.))*)`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ATTR, name: $scope$name, type: $scope$type, action: $scope$action};
                }
                return $$res;
            }, $$cr)();
    }
    public matchNAME($$dpth: number, $$cr?: ContextRecorder): Nullable<NAME> {
        return this.regexAccept(String.raw`(?:[a-zA-Z_][a-zA-Z0-9_]*)`, $$dpth + 1, $$cr);
    }
    public matchSTRLIT($$dpth: number, $$cr?: ContextRecorder): Nullable<STRLIT> {
        return this.runner<STRLIT>($$dpth,
            (log) => {
                if (log) {
                    log("STRLIT");
                }
                let $scope$start: Nullable<PosInfo>;
                let $scope$val: Nullable<string>;
                let $$res: Nullable<STRLIT> = null;
                if (true
                    && ($scope$start = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                    && ($scope$val = this.regexAccept(String.raw`(?:([^\'\\]|(\\.))*)`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.STRLIT, start: $scope$start, val: $scope$val};
                }
                return $$res;
            }, $$cr)();
    }
    public match_($$dpth: number, $$cr?: ContextRecorder): Nullable<_> {
        return this.regexAccept(String.raw`(?:(?:\s|(?:\/\/.*(?:\n|$)))*)`, $$dpth + 1, $$cr);
    }
    public matchTS_TYPE($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_TYPE> {
        return this.runner<TS_TYPE>($$dpth,
            (log) => {
                if (log) {
                    log("TS_TYPE");
                }
                let $scope$start: Nullable<PosInfo>;
                let $scope$end: Nullable<PosInfo>;
                let $$res: Nullable<TS_TYPE> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$start = this.mark()) !== null
                    && this.matchTS_TYPE_$0($$dpth + 1, $$cr) !== null
                    && ($scope$end = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE, start: $scope$start, end: $scope$end};
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_TYPE_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_TYPE_$0> {
        return this.choice<TS_TYPE_$0>([
            () => this.matchTS_TYPE_$0_1($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_$0_2($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_TYPE_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_TYPE_$0_1> {
        return this.matchTS_EXPR($$dpth + 1, $$cr);
    }
    public matchTS_TYPE_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_TYPE_$0_2> {
        return this.matchTS_FUNCTION($$dpth + 1, $$cr);
    }
    public matchTS_TYPE_$0_3($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_TYPE_$0_3> {
        return this.matchTS_CONSTRUCTOR($$dpth + 1, $$cr);
    }
    public matchTS_EXPR($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_EXPR> {
        return this.runner<TS_EXPR>($$dpth,
            (log) => {
                if (log) {
                    log("TS_EXPR");
                }
                let $$res: Nullable<TS_EXPR> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchTS_PRIM($$dpth + 1, $$cr) !== null
                    && this.loop<TS_EXPR_$0>(() => this.matchTS_EXPR_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_EXPR, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_EXPR_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_EXPR_$0> {
        return this.runner<TS_EXPR_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_EXPR_$0");
                }
                let $$res: Nullable<TS_EXPR_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[&|])`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_PRIM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_EXPR_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PRIM($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PRIM> {
        return this.runner<TS_PRIM>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PRIM");
                }
                let $$res: Nullable<TS_PRIM> = null;
                if (true
                    && this.matchTS_PRIM_$0($$dpth + 1, $$cr) !== null
                    && ((this.regexAccept(String.raw`(?:\[\])`, $$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PRIM_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PRIM_$0> {
        return this.choice<TS_PRIM_$0>([
            () => this.matchTS_PRIM_$0_1($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_2($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_PRIM_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PRIM_$0_1> {
        return this.runner<TS_PRIM_$0_1>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PRIM_$0_1");
                }
                let $$res: Nullable<TS_PRIM_$0_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_1, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PRIM_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PRIM_$0_2> {
        return this.matchTS_TYPE_REF($$dpth + 1, $$cr);
    }
    public matchTS_PRIM_$0_3($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PRIM_$0_3> {
        return this.runner<TS_PRIM_$0_3>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PRIM_$0_3");
                }
                let $$res: Nullable<TS_PRIM_$0_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PRIM_$0_$0($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_3, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PRIM_$0_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PRIM_$0_$0> {
        return this.runner<TS_PRIM_$0_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PRIM_$0_$0");
                }
                let $$res: Nullable<TS_PRIM_$0_$0> = null;
                if (true
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                    && this.loop<TS_PRIM_$0_$0_$0>(() => this.matchTS_PRIM_$0_$0_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PRIM_$0_$0_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PRIM_$0_$0_$0> {
        return this.runner<TS_PRIM_$0_$0_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PRIM_$0_$0_$0");
                }
                let $$res: Nullable<TS_PRIM_$0_$0_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PRIM_$0_$0_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_TYPE_REF($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_TYPE_REF> {
        return this.runner<TS_TYPE_REF>($$dpth,
            (log) => {
                if (log) {
                    log("TS_TYPE_REF");
                }
                let $$res: Nullable<TS_TYPE_REF> = null;
                if (true
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.loop<TS_TYPE_REF_$0>(() => this.matchTS_TYPE_REF_$0($$dpth + 1, $$cr), true) !== null
                    && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_REF, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_TYPE_REF_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_TYPE_REF_$0> {
        return this.runner<TS_TYPE_REF_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_TYPE_REF_$0");
                }
                let $$res: Nullable<TS_TYPE_REF_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_TYPE_REF_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_FUNCTION($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_FUNCTION> {
        return this.runner<TS_FUNCTION>($$dpth,
            (log) => {
                if (log) {
                    log("TS_FUNCTION");
                }
                let $$res: Nullable<TS_FUNCTION> = null;
                if (true
                    && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=>)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_FUNCTION, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_CONSTRUCTOR($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_CONSTRUCTOR> {
        return this.runner<TS_CONSTRUCTOR>($$dpth,
            (log) => {
                if (log) {
                    log("TS_CONSTRUCTOR");
                }
                let $$res: Nullable<TS_CONSTRUCTOR> = null;
                if (true
                    && this.regexAccept(String.raw`(?:new)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_FUNCTION($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_CONSTRUCTOR, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_GENERIC_PARAMS($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_GENERIC_PARAMS> {
        return this.runner<TS_GENERIC_PARAMS>($$dpth,
            (log) => {
                if (log) {
                    log("TS_GENERIC_PARAMS");
                }
                let $$res: Nullable<TS_GENERIC_PARAMS> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr) !== null
                    && ((this.matchTS_GENERIC_PARAMS_$0($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAMS, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_GENERIC_PARAMS_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_GENERIC_PARAMS_$0> {
        return this.runner<TS_GENERIC_PARAMS_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_GENERIC_PARAMS_$0");
                }
                let $$res: Nullable<TS_GENERIC_PARAMS_$0> = null;
                if (true
                    && this.matchTS_GENERIC_PARAM($$dpth + 1, $$cr) !== null
                    && this.loop<TS_GENERIC_PARAMS_$0_$0>(() => this.matchTS_GENERIC_PARAMS_$0_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAMS_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_GENERIC_PARAMS_$0_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_GENERIC_PARAMS_$0_$0> {
        return this.runner<TS_GENERIC_PARAMS_$0_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_GENERIC_PARAMS_$0_$0");
                }
                let $$res: Nullable<TS_GENERIC_PARAMS_$0_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_GENERIC_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAMS_$0_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_GENERIC_PARAM($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_GENERIC_PARAM> {
        return this.runner<TS_GENERIC_PARAM>($$dpth,
            (log) => {
                if (log) {
                    log("TS_GENERIC_PARAM");
                }
                let $$res: Nullable<TS_GENERIC_PARAM> = null;
                if (true
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_GENERIC_PARAM_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAM, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_GENERIC_PARAM_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_GENERIC_PARAM_$0> {
        return this.runner<TS_GENERIC_PARAM_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_GENERIC_PARAM_$0");
                }
                let $$res: Nullable<TS_GENERIC_PARAM_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:extends)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_GENERIC_PARAM_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PARAM_LIST($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PARAM_LIST> {
        return this.choice<TS_PARAM_LIST>([
            () => this.matchTS_PARAM_LIST_1($$dpth + 1, $$cr),
            () => this.matchTS_PARAM_LIST_2($$dpth + 1, $$cr),
            () => this.matchTS_PARAM_LIST_3($$dpth + 1, $$cr),
        ]);
    }
    public matchTS_PARAM_LIST_1($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PARAM_LIST_1> {
        return this.runner<TS_PARAM_LIST_1>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PARAM_LIST_1");
                }
                let $$res: Nullable<TS_PARAM_LIST_1> = null;
                if (true
                    && this.matchTS_REQUIRED_PARAMS($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST_$0($$dpth + 1, $$cr)) || true)
                    && ((this.matchTS_PARAM_LIST_$1($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_1, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PARAM_LIST_2($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PARAM_LIST_2> {
        return this.runner<TS_PARAM_LIST_2>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PARAM_LIST_2");
                }
                let $$res: Nullable<TS_PARAM_LIST_2> = null;
                if (true
                    && this.matchTS_OPTIONAL_PARAMS($$dpth + 1, $$cr) !== null
                    && ((this.matchTS_PARAM_LIST_$2($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_2, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PARAM_LIST_3($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PARAM_LIST_3> {
        return this.matchTS_REST_PARAM($$dpth + 1, $$cr);
    }
    public matchTS_PARAM_LIST_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PARAM_LIST_$0> {
        return this.runner<TS_PARAM_LIST_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PARAM_LIST_$0");
                }
                let $$res: Nullable<TS_PARAM_LIST_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_OPTIONAL_PARAMS($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PARAM_LIST_$1($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PARAM_LIST_$1> {
        return this.runner<TS_PARAM_LIST_$1>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PARAM_LIST_$1");
                }
                let $$res: Nullable<TS_PARAM_LIST_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_REST_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_$1, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_PARAM_LIST_$2($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_PARAM_LIST_$2> {
        return this.runner<TS_PARAM_LIST_$2>($$dpth,
            (log) => {
                if (log) {
                    log("TS_PARAM_LIST_$2");
                }
                let $$res: Nullable<TS_PARAM_LIST_$2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_REST_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_PARAM_LIST_$2, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_REQUIRED_PARAMS($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_REQUIRED_PARAMS> {
        return this.runner<TS_REQUIRED_PARAMS>($$dpth,
            (log) => {
                if (log) {
                    log("TS_REQUIRED_PARAMS");
                }
                let $$res: Nullable<TS_REQUIRED_PARAMS> = null;
                if (true
                    && this.matchTS_REQUIRED_PARAM($$dpth + 1, $$cr) !== null
                    && this.loop<TS_REQUIRED_PARAMS_$0>(() => this.matchTS_REQUIRED_PARAMS_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_REQUIRED_PARAMS, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_REQUIRED_PARAMS_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_REQUIRED_PARAMS_$0> {
        return this.runner<TS_REQUIRED_PARAMS_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_REQUIRED_PARAMS_$0");
                }
                let $$res: Nullable<TS_REQUIRED_PARAMS_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_REQUIRED_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_REQUIRED_PARAMS_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_REQUIRED_PARAM($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_REQUIRED_PARAM> {
        return this.runner<TS_REQUIRED_PARAM>($$dpth,
            (log) => {
                if (log) {
                    log("TS_REQUIRED_PARAM");
                }
                let $$res: Nullable<TS_REQUIRED_PARAM> = null;
                if (true
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_REQUIRED_PARAM, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_OPTIONAL_PARAMS($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_OPTIONAL_PARAMS> {
        return this.runner<TS_OPTIONAL_PARAMS>($$dpth,
            (log) => {
                if (log) {
                    log("TS_OPTIONAL_PARAMS");
                }
                let $$res: Nullable<TS_OPTIONAL_PARAMS> = null;
                if (true
                    && this.matchTS_OPTIONAL_PARAM($$dpth + 1, $$cr) !== null
                    && this.loop<TS_OPTIONAL_PARAMS_$0>(() => this.matchTS_OPTIONAL_PARAMS_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_OPTIONAL_PARAMS, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_OPTIONAL_PARAMS_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_OPTIONAL_PARAMS_$0> {
        return this.runner<TS_OPTIONAL_PARAMS_$0>($$dpth,
            (log) => {
                if (log) {
                    log("TS_OPTIONAL_PARAMS_$0");
                }
                let $$res: Nullable<TS_OPTIONAL_PARAMS_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_OPTIONAL_PARAM($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_OPTIONAL_PARAMS_$0, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_OPTIONAL_PARAM($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_OPTIONAL_PARAM> {
        return this.runner<TS_OPTIONAL_PARAM>($$dpth,
            (log) => {
                if (log) {
                    log("TS_OPTIONAL_PARAM");
                }
                let $$res: Nullable<TS_OPTIONAL_PARAM> = null;
                if (true
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\?)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_OPTIONAL_PARAM, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchTS_REST_PARAM($$dpth: number, $$cr?: ContextRecorder): Nullable<TS_REST_PARAM> {
        return this.runner<TS_REST_PARAM>($$dpth,
            (log) => {
                if (log) {
                    log("TS_REST_PARAM");
                }
                let $$res: Nullable<TS_REST_PARAM> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.\.\.)`, $$dpth + 1, $$cr) !== null
                    && this.matchNAME($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TS_REST_PARAM, };
                }
                return $$res;
            }, $$cr)();
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchGRAM(0);
        const ans = res !== null && this.finished();
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchGRAM(0);
        if (res && this.finished()) {
            return new ParseResult(res, null);
        }
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchGRAM(0, rec);
        return new ParseResult(res,
            rec.getErr() ?? new SyntaxErr(this.mark(), new Set(["$EOF"]), new Set([])));
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private runner<T>($$dpth: number, fn: $$RuleType<T>, cr?: ContextRecorder): $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = cr ? (() => {
                const extraInfo: string[] = [];
                const result = fn((msg: string) => extraInfo.push(msg));
                cr.record(mrk, $$dpth, result, this.negating, extraInfo);
                return result;
            })() : fn();
            if (res !== null) {
                return res;
            }
            this.reset(mrk);
            return null;
        };
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ContextRecorder): Nullable<string> {
        return this.runner<string>(dpth,
            (log) => {
                if (log) {
                    if (this.negating) {
                        log("$$!StrMatch");
                    } else {
                        log("$$StrMatch");
                    }
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    log(match.substring(3, match.length - 1));
                }
                const reg = new RegExp(match, "y");
                reg.lastIndex = this.mark().overallPos;
                const res = reg.exec(this.input);
                if (res) {
                    let lineJmp = 0;
                    let lind = -1;
                    for (let i = 0; i < res[0].length; ++i) {
                        if (res[0][i] === "\n") {
                            ++lineJmp;
                            lind = i;
                        }
                    }
                    this.pos = {
                        overallPos: reg.lastIndex,
                        line: this.pos.line + lineJmp,
                        offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
                    };
                    return res[0];
                }
                return null;
            }, cr)();
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export class ParseResult {
    public ast: Nullable<GRAM>;
    public err: Nullable<SyntaxErr>;
    constructor(ast: Nullable<GRAM>, err: Nullable<SyntaxErr>) {
        this.ast = ast;
        this.err = err;
    }
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export class SyntaxErr {
    public pos: PosInfo;
    public exprules: string[];
    public expmatches: string[];
    constructor(pos: PosInfo, exprules: Set<string>, expmatches: Set<string>) {
        this.pos = pos;
        this.exprules = [...exprules];
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Tried to match rules ${this.exprules.join(", ")}. Expected one of ${this.expmatches.map((x) => ` '${x}'`)}`;
    }
}
class ErrorTracker implements ContextRecorder {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private mnd: number = -1;
    private prules: Set<string> = new Set();
    private pmatches: Set<string> = new Set();
    public record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]) {
        if ((result === null) === negating) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.mnd = depth;
            this.pmatches.clear();
            this.prules.clear();
        } else if (pos.overallPos === this.mxpos.overallPos && depth < this.mnd) {
            this.mnd = depth;
            this.prules.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos && extraInfo.length >= 2) {
            if (extraInfo[0] === "$$StrMatch") {
                this.pmatches.add(extraInfo[1]);
            }
            if (extraInfo[0] === "$$!StrMatch") {
                this.pmatches.add(`not ${extraInfo[1]}`);
            }
        }
        if (this.mxpos.overallPos === pos.overallPos && this.mnd === depth) {
            extraInfo.forEach((x) => { if (x !== "$$StrMatch" && x !== "$$!StrMatch") { this.prules.add(x); } });
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.prules, this.pmatches);
        }
        return null;
    }
}